@inproceedings{Basman2015,
  title = {Harmonious {{Authorship}} from {{Different Representations}} ({{Work}} in {{Progress}})},
  booktitle = {Proc. {{PPIG}} 2015 {{Psychology}} of {{Programming Annual Conference}}. {{Bournemouth}}, {{England}}, 15th-17th {{July}}},
  author = {Basman, Antranig and Clark, Colin and Lewis, Clayton},
  date = {2015},
  abstract = {We describe the Infusion system, which is a library, language system or integration domain implemented in JavaScript, as well as a mentality and model for thinking about the expression of end-user applications. We promise that this system will bring together the worlds of different kinds of users engaged in different tasks at different times, and allow them shared authorial access to the same artefacts which are presented to each in a notation appropriate for them.},
  file = {/Users/orion/Zotero/storage/2NKMD3M7/Basman et al. - 2015 - Harmonious Authorship from Different Representations (Work in Progress).pdf}
}

@inproceedings{Basman2018,
  title = {An Anatomy of Interaction: Co-Occurrences and Entanglements},
  shorttitle = {An Anatomy of Interaction},
  booktitle = {Conference {{Companion}} of the 2nd {{International Conference}} on {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  author = {Basman, Antranig and Tchernavskij, Philip and Bates, Simon and Beaudouin-Lafon, Michel},
  date = {2018-04-09},
  pages = {188--196},
  publisher = {ACM},
  location = {Nice France},
  doi = {10.1145/3191697.3214328},
  url = {https://dl.acm.org/doi/10.1145/3191697.3214328},
  urldate = {2022-11-11},
  abstract = {We present a new taxonomy for describing the conditions and implementation of interactions. Current mechanisms for embedding interaction in software promote a hard separation between the programmers who produce the software, and the communities who go on to use it. In order to support open ecologies of function and fabrication, where this separation is negotiated by communities of users and designers, we need to reconceive those mechanisms. We describe interaction in two phases: Co-occurrence, the prerequisite conditions for an interaction to take place; and entanglement, the temporary coupling and interplay between elements participating in the interaction. We then sketch a blueprint of a system where those phases and their adjacent mechanisms enable communities of users to build and use interactive software. There are many ways of conceiving this new design space, and we present three dominant metaphors which we have employed so far, based on chemical reactions, quantum physics and cooking. We exhibit different systems which we have implemented based on these metaphors, and sketch how future systems will further empower citizens to design and inhabit their own interactions, express ownership over them and share them with communities of interest.},
  eventtitle = {{$<$}{{Programming}}{$>$} 2018: 2nd {{International Conference}} on the {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}} 2018},
  isbn = {978-1-4503-5513-1},
  langid = {english},
  file = {/Users/orion/Zotero/storage/NWWC55N5/Basman et al. - 2018 - An anatomy of interaction co-occurrences and entanglements.pdf}
}

@inproceedings{Basman2018a,
  title = {The Open Authorial Principle: Supporting Networks of Authors in Creating Externalisable Designs},
  shorttitle = {The Open Authorial Principle},
  booktitle = {Proceedings of the 2018 {{ACM SIGPLAN International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}}},
  author = {Basman, Antranig and Lewis, Clayton and Clark, Colin},
  date = {2018-10-24},
  series = {Onward! 2018},
  pages = {29--43},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3276954.3276963},
  url = {https://doi.org/10.1145/3276954.3276963},
  urldate = {2022-11-29},
  abstract = {We introduce a new principle, the open authorial principle, that characterises desirable properties of languages supporting networks of authors. We survey the growth in generosity of authorial systems, in a progression starting with traditional object-orientation, continuing through aspect-oriented, subject-oriented, context-oriented and dependency injection systems, and concluding with the most recent generation of highly dynamic systems such as Korz and Newspeak. We follow the implications of our principle for the externalisation of application designs, resulting from the need to promote the representation of differences between programs as valid programs themselves. This raises conceptual and practical parallels with technologies and idioms supporting the web, such as REST, realised document structures supported by the DOM, and the negotiated space of CSS selectors. These parallels lead to a quite different organisation for the language and runtime of an openly authorable system, which emphasises a publicly addressable cellular structure and a largely static dispatch.},
  isbn = {978-1-4503-6031-9},
  file = {/Users/orion/Zotero/storage/FDQPAX3I/Basman et al. - 2018 - The open authorial principle supporting networks of authors in creating externalisable designs.pdf}
}

@inproceedings{Basman2018b,
  title = {What {{Lies}} in the {{Path}} of the {{Revolution}}},
  author = {Basman, Antranig},
  date = {2018},
  url = {https://www.semanticscholar.org/paper/What-Lies-in-the-Path-of-the-Revolution-Basman/4221ad0ce5764e77147e9974ea55dd502a8beeeb},
  urldate = {2022-12-21},
  abstract = {Increasingly, the rights and capabilities to own technological artefacts, where they exist at all, are reserved to corporations and not to citizens. There are historical, economic, metaphysical, ideological and cognitive reasons for this situation, in addition to purely technological factors, which we will trace by following the fate of various concrete examples, analysed into five categories of ownable elements. These categories are those of ownable function, ownable expression, ownable data, ownable installations and ownable economies. In this paper, we attempt to align these goals of ownability into a research and activism program by describing a set of revolutionary goals in each category, and tracing ways we could reach them.},
  eventtitle = {{{PPIG}}},
  file = {/Users/orion/Zotero/storage/RX9JQKSN/Basman - 2018 - What Lies in the Path of the Revolution.pdf}
}

@inproceedings{Beaudouin-Lafon2000,
  title = {Instrumental Interaction: An Interaction Model for Designing Post-{{WIMP}} User Interfaces},
  shorttitle = {Instrumental Interaction},
  booktitle = {Proceedings of the {{SIGCHI}} Conference on {{Human Factors}} in {{Computing Systems}}},
  author = {Beaudouin-Lafon, Michel},
  date = {2000-04},
  pages = {446--453},
  publisher = {ACM},
  location = {The Hague The Netherlands},
  doi = {10.1145/332040.332473},
  url = {https://dl.acm.org/doi/10.1145/332040.332473},
  urldate = {2025-07-20},
  eventtitle = {{{CHI00}}: {{Human Factors}} in {{Computing Systems}}},
  isbn = {978-1-58113-216-8},
  langid = {english}
}

@inproceedings{Beaudouin-Lafon2023,
  title = {Beyond {{Applications}}: {{Interaction Substrates}} and {{Instruments}}},
  shorttitle = {Beyond {{Applications}}},
  booktitle = {Proceedings of the 34th {{Conference}} on l'{{Interaction Humain-Machine}}},
  author = {Beaudouin-Lafon, Michel},
  date = {2023-05-29},
  series = {{{IHM}} '23},
  pages = {1--15},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3583961.3583968},
  url = {https://doi.org/10.1145/3583961.3583968},
  urldate = {2024-02-05},
  abstract = {This paper introduces a new interaction model based on the concepts of interaction substrate for organizing digital information and interaction instruments for manipulating these substrates. This approach makes the concept of application unnecessary. Instead, it leads to flexible and extensible environments in which users can combine content at will and choose the tools they need to manipulate it. We present Stratify, a proof-of-concept implementation that combines a data-reactive approach to specify relationships among digital objects with a functional-reactive approach to handle interaction. This combination enables the creation of rich information substrates that can be freely inspected and modified, as well as interaction instruments that are decoupled from the objects they interact with, making it possible to use instruments with objects they were not designed for. We illustrate the flexibility of the approach with several examples and present directions for future work.},
  isbn = {978-1-4503-9824-4},
  keywords = {Conceptual model,Instrument,Instrumental interaction,Interaction instrumentale,Interaction model,Modèle conceptuel,Modèle d’interaction,Programmation réactive,Reactive programming,Substrat,Substrate}
}

@inproceedings{Chasins2018,
  title = {Rousillon: {{Scraping Distributed Hierarchical Web Data}}},
  shorttitle = {Rousillon},
  booktitle = {Proceedings of the 31st {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  author = {Chasins, Sarah E. and Mueller, Maria and Bodik, Rastislav},
  date = {2018-10-11},
  pages = {963--975},
  publisher = {ACM},
  location = {Berlin Germany},
  doi = {10.1145/3242587.3242661},
  url = {https://dl.acm.org/doi/10.1145/3242587.3242661},
  urldate = {2025-07-20},
  eventtitle = {{{UIST}} '18: {{The}} 31st {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  isbn = {978-1-4503-5948-1},
  langid = {english},
  file = {/Users/orion/Zotero/storage/H8GR6I66/Chasins et al. - 2018 - Rousillon Scraping Distributed Hierarchical Web Data.pdf}
}

@article{Clark2017,
  title = {Tracing a {{Paradigm}} for {{Externalization}}: {{Avatars}} and the {{GPII Nexus}}},
  author = {Clark, Colin and Basman, Antranig},
  date = {2017},
  abstract = {We will situate the concept of an avatar (a working simulacrum of part of a system separated from it in space or time) with respect to traditional concepts of programming language and systems design. Whilst much theory and practice argues in favour of insulation (the creation of architectural boundaries prohibiting the leakage of information) we will find that many successful systems take a diametrically opposed approach. We name this family of systems as those based on externalised state transfer. Rather than hiding implementation details behind APIs, object interfaces or similar, these systems actively advertise their internal structure and its coordinates via data and metadata. Examples of these systems include RESTful web applications, MIDI devices, and the DWARF debugging file format. We discuss such systems and how we can purposefully design new systems embodying such virtues in a more distilled form.},
  langid = {english},
  file = {/Users/orion/Zotero/storage/GE294ZY3/Clark and Basman - Tracing a Paradigm for Externalization Avatars and the GPII Nexus.pdf}
}

@online{Doctorow2019,
  title = {Adversarial {{Interoperability}}},
  author = {Doctorow, Cory},
  date = {2019-10-02T17:04:56-07:00},
  url = {https://www.eff.org/deeplinks/2019/10/adversarial-interoperability},
  urldate = {2020-08-09},
  abstract = {“Interoperability” is the act of making a new product or service work with an existing product or service: modern civilization depends on the standards and practices that allow you to put any dish into a dishwasher or any USB charger into any car’s cigarette lighter.But interoperability is just the...},
  langid = {english},
  organization = {Electronic Frontier Foundation},
  keywords = {Political/Economic/Social},
  annotation = {00000}
}

@article{Edwards2009,
  title = {Experiences with Recombinant Computing: {{Exploring}} Ad Hoc Interoperability in Evolving Digital Networks},
  shorttitle = {Experiences with Recombinant Computing},
  author = {Edwards, W. Keith and Newman, Mark W. and Sedivy, Jana Z. and Smith, Trevor F.},
  date = {2009-04},
  journaltitle = {ACM Transactions on Computer-Human Interaction},
  shortjournal = {ACM Trans. Comput.-Hum. Interact.},
  volume = {16},
  number = {1},
  pages = {1--44},
  issn = {1073-0516, 1557-7325},
  doi = {10.1145/1502800.1502803},
  url = {https://dl.acm.org/doi/10.1145/1502800.1502803},
  urldate = {2025-07-20},
  abstract = {This article describes an infrastructure that supports the creation of interoperable systems while requiring only limited prior agreements about the specific forms of communication between these systems. Conceptually, our approach uses a set of “meta-interfaces”—agreements on how to exchange new behaviors necessary to                achieve compatibility at runtime                , rather than requiring that communication specifics be                built in at development time                —to allow devices on the network to interact with one another. While this approach to interoperability can remove many of the system-imposed constraints that prevent fluid, ad hoc use of devices now, it imposes its own limitations on the user experience of systems that use it. Most importantly, since devices may be expected to work with peers about which they have no detailed semantic knowledge, it is impossible to achieve the sort of tight semantic integration that can be obtained using other approaches today, despite the fact that these other approaches limit interoperability. Instead, under our model, users must be tasked with performing the sense-making and semantic arbitration necessary to determine how any set of devices will be used together. This article describes the motivation and details of our infrastructure, its implications on the user experience, and our experience in creating, deploying, and using applications built with it over a period of several years.},
  langid = {english},
  file = {/Users/orion/Zotero/storage/78PKNASQ/Edwards et al. - 2009 - Experiences with recombinant computing Exploring ad hoc interoperability in evolving digital networ.pdf}
}

@article{Garlan1995,
  title = {Architectural Mismatch: Why Reuse Is so Hard},
  shorttitle = {Architectural Mismatch},
  author = {Garlan, D. and Allen, R. and Ockerbloom, J.},
  date = {1995},
  journaltitle = {IEEE Software},
  shortjournal = {IEEE Softw.},
  volume = {12},
  number = {6},
  pages = {17--26},
  publisher = {{Institute of Electrical and Electronics Engineers (IEEE)}},
  issn = {0740-7459},
  doi = {10.1109/52.469757},
  url = {http://ieeexplore.ieee.org/document/469757/},
  urldate = {2025-07-22},
  langid = {english},
  file = {/Users/orion/Zotero/storage/P9B8L8SU/Garlan et al. - 1995 - Architectural mismatch why reuse is so hard.pdf}
}

@online{Geoffrey2022,
  title = {Potluck: {{Dynamic}} Documents as Personal Software},
  shorttitle = {Potluck},
  author = {Geoffrey, Litt and Max, Schoening and Paul, Shen and Paul, Sonnentag},
  date = {2022},
  url = {https://www.inkandswitch.com/potluck/},
  urldate = {2025-07-20},
  abstract = {Gradually enriching text documents into interactive applications},
  langid = {english},
  file = {/Users/orion/Zotero/storage/F7BRUWQN/potluck.html}
}

@inproceedings{Hall2015,
  title = {Rethinking the Human-Readability Infrastructure},
  booktitle = {Proceedings of the {{Workshop}} on {{Future Programming}}},
  author = {Hall, Christopher},
  date = {2015-10-26},
  series = {{{FPW}} 2015},
  pages = {1--6},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/2846656.2846657},
  url = {https://doi.org/10.1145/2846656.2846657},
  urldate = {2022-01-20},
  abstract = {Character encodings and text editing widgets and applications together form the current human-readability infrastructure. We outline an alternative human-readability infrastructure that is simultaneously appropriate for textual formats and binary runtime data structures. Our approach consists of a binary metaformat and corresponding language-independent structure editor. Here we describe our prototype editor, its suitability to supersede text editors, and several case studies that explore its immediate and repeat benefit to various content domains.},
  isbn = {978-1-4503-3905-6},
  keywords = {representation systems},
  annotation = {00000},
  file = {/Users/orion/Zotero/storage/SYFNPLP9/Hall - 2015 - Rethinking the human-readability infrastructure.pdf}
}

@article{Heer2019,
  title = {Agency plus Automation: {{Designing}} Artificial Intelligence into Interactive Systems},
  shorttitle = {Agency plus Automation},
  author = {Heer, Jeffrey},
  date = {2019-02-05},
  journaltitle = {Proceedings of the National Academy of Sciences},
  shortjournal = {Proc. Natl. Acad. Sci. U.S.A.},
  volume = {116},
  number = {6},
  pages = {1844--1850},
  issn = {0027-8424, 1091-6490},
  doi = {10.1073/pnas.1807184115},
  url = {https://pnas.org/doi/full/10.1073/pnas.1807184115},
  urldate = {2025-07-20},
  abstract = {Much contemporary rhetoric regards the prospects and pitfalls of using artificial intelligence techniques to automate an increasing range of tasks, especially those once considered the purview of people alone. These accounts are often wildly optimistic, understating outstanding challenges while turning a blind eye to the human labor that undergirds and sustains ostensibly “automated” services. This long-standing focus on purely automated methods unnecessarily cedes a promising design space: one in which computational assistance augments and enriches, rather than replaces, people’s intellectual work. This tension between human agency and machine automation poses vital challenges for design and engineering. In this work, we consider the design of systems that enable rich, adaptive interaction between people and algorithms. We seek to balance the often-complementary strengths and weaknesses of each, while promoting human control and skillful action. We share case studies of interactive systems we have developed in three arenas—data wrangling, exploratory analysis, and natural language translation—that integrate proactive computational support into interactive systems. To improve outcomes and support learning by both people and machines, we describe the use of shared representations of tasks augmented with predictive models of human capabilities and actions. We conclude with a discussion of future prospects and scientific frontiers for intelligence augmentation research.},
  langid = {english}
}

@inproceedings{Horowitz2023,
  title = {Engraft: {{An API}} for {{Live}}, {{Rich}}, and {{Composable Programming}}},
  shorttitle = {Engraft},
  booktitle = {Proceedings of the 36th {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  author = {Horowitz, Joshua and Heer, Jeffrey},
  date = {2023-10-29},
  pages = {1--18},
  publisher = {ACM},
  location = {San Francisco CA USA},
  doi = {10.1145/3586183.3606733},
  url = {https://dl.acm.org/doi/10.1145/3586183.3606733},
  urldate = {2025-07-20},
  eventtitle = {{{UIST}} '23: {{The}} 36th {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  isbn = {979-8-4007-0132-0},
  langid = {english},
  file = {/Users/orion/Zotero/storage/EGNQ9J7C/Horowitz and Heer - 2023 - Engraft An API for Live, Rich, and Composable Programming.pdf}
}

@inproceedings{Huynh2006,
  title = {Enabling Web Browsers to Augment Web Sites' Filtering and Sorting Functionalities},
  booktitle = {Proceedings of the 19th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology},
  author = {Huynh, David F. and Miller, Robert C. and Karger, David R.},
  date = {2006-10-15},
  pages = {125--134},
  publisher = {ACM},
  location = {Montreux Switzerland},
  doi = {10.1145/1166253.1166274},
  url = {https://dl.acm.org/doi/10.1145/1166253.1166274},
  urldate = {2025-07-20},
  abstract = {Existing augmentations of web pages are mostly small cosmetic changes (e.g., removing ads) and minor addition of third-party content (e.g., product prices from competing sites). None leverages the structured data presented in web pages. This paper describes Sifter, a web browser extension that can augment a well-structured web site with advanced filtering and sorting functionality. These added features work inside the site's own pages, preserving the site's presentational style and the user's context. Sifter contains an algorithm that scrapes structured data out of well-structured web pages while usually requiring no user intervention. We tested Sifter on real web sites and real users and found that people could use Sifter to perform sophisticated queries and high-level analyses on sizable data collections on the Web. We propose that web sites can be similarly augmented with other sophisticated data-centric functionality, giving users new benefits over the existing Web.},
  eventtitle = {{{UIST06}}: {{The}} 19th {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  isbn = {978-1-59593-313-3},
  langid = {english},
  file = {/Users/orion/Zotero/storage/DFU4KMD8/Huynh et al. - 2006 - Enabling web browsers to augment web sites' filtering and sorting functionalities.pdf}
}

@article{Katongo2022,
  title = {Joker: {{A Unified Interaction Model For Web Customization}}},
  author = {Katongo, Kapaya and Litt, Geoffrey and Jin, Kathryn and Jackson, Daniel},
  date = {2022},
  abstract = {Tools that enable end-users to customize websites typically use a two-stage workflow: first, users extract data into a structured form; second, they use that extracted data to augment the original website in some way. This two-stage workflow poses a usability barrier because it requires users to make upfront decisions about what data to extract, rather than allowing them to incrementally extract data as they augment it.},
  langid = {english},
  file = {/Users/orion/Zotero/storage/KVZ8I8R9/Katongo et al. - 2022 - Joker A Unified Interaction Model For Web Customization.pdf}
}

@inproceedings{Kell2009,
  title = {The Mythical Matched Modules: Overcoming the Tyranny of Inflexible Software Construction},
  shorttitle = {The Mythical Matched Modules},
  booktitle = {Proceeding of the 24th {{ACM SIGPLAN}} Conference Companion on {{Object}} Oriented Programming Systems Languages and Applications - {{OOPSLA}} '09},
  author = {Kell, Stephen},
  date = {2009},
  pages = {881},
  publisher = {ACM Press},
  location = {Orlando, Florida, USA},
  doi = {10.1145/1639950.1640051},
  url = {http://dl.acm.org/citation.cfm?doid=1639950.1640051},
  urldate = {2022-03-15},
  abstract = {Conventional tools yield expensive and inflexible software. By requiring that software be structured as plug-compatible modules, tools preclude out-of-order development; by treating interoperation of languages as rare, adoption of innovations is inhibited. I propose that a solution must radically separate the concern of integration in software: firstly by using novel tools specialised towards integration (the “integration domain”), and secondly by prohibiting use of preexisting interfaces (“interface hiding”) outside that domain.},
  eventtitle = {Proceeding of the 24th {{ACM SIGPLAN}} Conference Companion},
  isbn = {978-1-60558-768-4},
  langid = {english},
  annotation = {00012},
  file = {/Users/orion/Zotero/storage/EBCTV4FA/Kell - 2009 - The mythical matched modules overcoming the tyranny of inflexible software construction.pdf}
}

@inproceedings{Kell2018,
  title = {The Inevitable Death of {{VMs}}: A Progress Report},
  shorttitle = {The Inevitable Death of {{VMs}}},
  booktitle = {Conference {{Companion}} of the 2nd {{International Conference}} on {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  author = {Kell, Stephen},
  date = {2018-04-09},
  pages = {61--62},
  publisher = {ACM},
  location = {Nice France},
  doi = {10.1145/3191697.3191728},
  url = {https://dl.acm.org/doi/10.1145/3191697.3191728},
  urldate = {2025-07-21},
  abstract = {Language virtual machines (VMs), as implementation artifacts, are characterised by hard boundaries which limit their conduciveness to language interoperability, whole-system tooling, and other interactions with the ‘world outside’. Since the VM paradigm emerged, it has become increasingly clear that no single language or VM can succeed to the exclusion of others. This motivates a different approach in which languages are no longer implemented as VMs per se, but as participants in certain shared system-wide protocols, shared across diverse collection of languages and constituting a more porous boundary. One means of achieving such a shift is to evolve the underlying infrastructure from an essentially Unix-like environment to one that incorporates VM-like services, including memory management primitives, as a core protocol shared between many language implementations. Ongoing work towards these goals within the liballocs runtime is discussed, specifically concerning pointer identification, process-wide garbage collection, and speculative optimisations.},
  eventtitle = {{$<$}{{Programming}}{$>$} 2018: 2nd {{International Conference}} on the {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}} 2018},
  langid = {english},
  file = {/Users/orion/Zotero/storage/IWS6I9S7/Kell - 2018 - The inevitable death of VMs a progress report.pdf}
}

@inproceedings{Kell2020,
  title = {Convivial Design Heuristics for Software Systems},
  booktitle = {Conference {{Companion}} of the 4th {{International Conference}} on {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  author = {Kell, Stephen},
  date = {2020-03-23},
  pages = {144--148},
  publisher = {ACM},
  location = {Porto Portugal},
  doi = {10.1145/3397537.3397543},
  url = {https://dl.acm.org/doi/10.1145/3397537.3397543},
  urldate = {2025-07-20},
  eventtitle = {{$<$}{{Programming}}{$>$} '20: 4th {{International Conference}} on the {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  isbn = {978-1-4503-7507-8},
  langid = {english},
  file = {/Users/orion/Zotero/storage/3WZR8PZ7/Kell - 2020 - Convivial design heuristics for software systems.pdf}
}

@online{Kiczales1991,
  title = {The {{Art}} of the {{Metaobject Protocol}}},
  author = {Kiczales, Gregor and family=Rivieres, given=Jim, prefix=des, useprefix=true and Bobrow, Daniel},
  date = {1991},
  url = {https://mitpress.mit.edu/9780262111584/the-art-of-the-metaobject-protocol/},
  urldate = {2025-07-22},
  abstract = {The CLOS metaobject protocol is an elegant, high-performance extension to the CommonLisp Object System. The authors, who developed the metaobject protocol an...},
  langid = {american},
  organization = {MIT Press},
  file = {/Users/orion/Zotero/storage/EUWWALL3/the-art-of-the-metaobject-protocol.html}
}

@inproceedings{Klokmose2015,
  title = {\mkbibemph{Webstrates}: {{Shareable Dynamic Media}}},
  shorttitle = {\mkbibemph{Webstrates}},
  booktitle = {Proceedings of the 28th {{Annual ACM Symposium}} on {{User Interface Software}} \& {{Technology}}},
  author = {Klokmose, Clemens N. and Eagan, James R. and Baader, Siemen and Mackay, Wendy and Beaudouin-Lafon, Michel},
  date = {2015-11-05},
  pages = {280--290},
  publisher = {ACM},
  location = {Charlotte NC USA},
  doi = {10.1145/2807442.2807446},
  url = {https://dl.acm.org/doi/10.1145/2807442.2807446},
  urldate = {2025-07-20},
  eventtitle = {{{UIST}} '15: {{The}} 28th {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  isbn = {978-1-4503-3779-3},
  langid = {english}
}

@book{Lialina2021,
  title = {Turing {{Complete User}}: {{Resisting Alienation}} in {{Human Computer Interaction}}},
  shorttitle = {Turing {{Complete User}}},
  author = {Lialina, Olia},
  date = {2021-12-09},
  journaltitle = {arthistoricum.net-ART-Books},
  publisher = {arthistoricum.net-ART-Books},
  doi = {10.11588/arthistoricum.972},
  url = {https://books.ub.uni-heidelberg.de//arthistoricum/catalog/book/972},
  urldate = {2023-11-06},
  abstract = {Interface Critique bookAround 2010, the field of human-computer interaction and the IT industry at large started to invest in reforming their terminology: banning some words and reversing the meanings of others to camouflage the widening gap between users and developers, to smooth the transition from personal computers to “dumb terminals”, from servers to “buckets”, from double-clicking to saying “OK, Google”. Computer users also learnt to talk, loud and clear, to be understood by Siri, Alexa, Google Glass, HoloLens, and other products that perform both listening and answering. Maybe it is exactly this amalgamation of input and output into a “conversation” that defines the past decade, and it will be the core of HCI research in the years to come. Who is scripting the conversations with these invisible ears and mouths? How can users control their lines? When hardware and software dissolve into anthropomorphic forms and formless “experiences”, words stop being mere names and metaphors. They do not only appeal to the imagination and give shape to invisible products. Words themselves become interfaces – and every change in vocabulary matters.},
  isbn = {978-3-98501-071-4},
  langid = {english},
  keywords = {Computer,Culture,gnd/1232346071,gnd/4027266-7,gnd/4038639-9,gnd/4070083-5,gnd/4125698-0,Human being,Interaction,User experience}
}

@inproceedings{Lin2009,
  title = {End-User Programming of Mashups with Vegemite},
  booktitle = {Proceedings of the 14th International Conference on {{Intelligent}} User Interfaces},
  author = {Lin, James and Wong, Jeffrey and Nichols, Jeffrey and Cypher, Allen and Lau, Tessa A.},
  date = {2009-02-08},
  pages = {97--106},
  publisher = {ACM},
  location = {Sanibel Island Florida USA},
  doi = {10.1145/1502650.1502667},
  url = {https://dl.acm.org/doi/10.1145/1502650.1502667},
  urldate = {2025-07-20},
  abstract = {Mashups are an increasingly popular way to integrate data from multiple web sites to fit a particular need, but it often requires substantial technical expertise to create them. To lower the barrier for creating mashups, we have extended the CoScripter web automation tool with a spreadsheet-like environment called Vegemite. Our system uses direct-manipulation and programming-by-demonstration tech-niques to automatically populate tables with information collected from various web sites. A particular strength of our approach is its ability to augment a data set with new values computed by a web site, such as determining the driving distance from a particular location to each of the addresses in a data set. An informal user study suggests that Vegemite may enable a wider class of users to address their information needs.},
  eventtitle = {{{IUI09}}: 14th {{International Conference}} on {{Intelligent User Interfaces}}},
  isbn = {978-1-60558-168-2},
  langid = {english},
  file = {/Users/orion/Zotero/storage/NHZRKQZ6/Lin et al. - 2009 - End-user programming of mashups with vegemite.pdf}
}

@inproceedings{Litt2020,
  title = {Wildcard: Spreadsheet-Driven Customization of Web Applications},
  shorttitle = {Wildcard},
  booktitle = {Conference {{Companion}} of the 4th {{International Conference}} on {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  author = {Litt, Geoffrey and Jackson, Daniel},
  date = {2020-03-23},
  pages = {126--135},
  publisher = {ACM},
  location = {Porto Portugal},
  doi = {10.1145/3397537.3397541},
  url = {https://dl.acm.org/doi/10.1145/3397537.3397541},
  urldate = {2023-10-26},
  abstract = {Many Web applications do not meet the precise needs of their users. Browser extensions offer a way to customize web applications, but most people do not have the programming skills to implement their own extensions.},
  eventtitle = {{$<$}{{Programming}}{$>$} '20: 4th {{International Conference}} on the {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  isbn = {978-1-4503-7507-8},
  langid = {english},
  file = {/Users/orion/Zotero/storage/2RNM2FIP/Litt and Jackson - 2020 - Wildcard spreadsheet-driven customization of web applications.pdf}
}

@inproceedings{MacLean1990,
  title = {User-Tailorable Systems: Pressing the Issues with Buttons},
  shorttitle = {User-Tailorable Systems},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {MacLean, Allan and Carter, Kathleen and Lövstrand, Lennart and Moran, Thomas},
  date = {1990-03-01},
  series = {{{CHI}} '90},
  pages = {175--182},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/97243.97271},
  url = {https://dl.acm.org/doi/10.1145/97243.97271},
  urldate = {2025-07-20},
  abstract = {It is impossible to design systems which are appropriate for all users and all situations. We believe that a useful technique is to have end users tailor their systems to match their personal work practices. This requires not only systems which can be tailored, but a culture within which users feel in control of the system and in which tailoring is the norm. In a two-pronged research project we have worked closely with a group of users to develop a system to support tailoring and to help the users evolve a “tailoring culture”. This has resulted in a flexible system based around the use of distributed on-screen Buttons to support a range of tailoring techniques.},
  isbn = {978-0-201-50932-8},
  file = {/Users/orion/Zotero/storage/W7HTE6ZI/MacLean et al. - 1990 - User-tailorable systems pressing the issues with buttons.pdf}
}

@article{Morrison2022,
  title = {Voluptuous {{Disintegration}}: {{A Future History}} of {{Black Computational Thought}}},
  shorttitle = {Voluptuous {{Disintegration}}},
  author = {Morrison, Romi Ron},
  date = {2022-07-22},
  journaltitle = {Digital Humanities Quarterly},
  shortjournal = {DHQ},
  volume = {016},
  number = {3},
  issn = {1938-4122}
}

@inbook{Ostermann2011,
  title = {Revisiting {{Information Hiding}}: {{Reflections}} on {{Classical}} and {{Nonclassical Modularity}}},
  shorttitle = {Revisiting {{Information Hiding}}},
  booktitle = {Lecture {{Notes}} in {{Computer Science}}},
  date = {2011},
  pages = {155--178},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  issn = {0302-9743, 1611-3349},
  doi = {10.1007/978-3-642-22655-7_8},
  url = {http://link.springer.com/10.1007/978-3-642-22655-7_8},
  urldate = {2025-07-23},
  abstract = {What is modularity? Which kind of modularity should developers strive for? Despite decades of research on modularity, these basic questions have no definite answer. We submit that the common understanding of modularity, and in particular its notion of information hiding, is deeply rooted in classical logic. We analyze how classical modularity, based on classical logic, fails to address the needs of developers of large software systems, and encourage researchers to explore alternative visions of modularity, based on nonclassical logics, and henceforth called nonclassical modularity.},
  bookauthor = {Ostermann, Klaus and Giarrusso, Paolo G. and Kästner, Christian and Rendel, Tillmann},
  isbn = {978-3-642-22654-0 978-3-642-22655-7},
  langid = {english},
  file = {/Users/orion/Zotero/storage/JI65PPCV/2011 - Revisiting Information Hiding Reflections on Classical and Nonclassical Modularity.pdf}
}

@book{Paterno2017,
  title = {New {{Perspectives}} in {{End-User Development}}},
  editor = {Paternò, Fabio and Wulf, Volker},
  date = {2017},
  series = {{{SpringerLink Bücher}}},
  publisher = {Springer},
  location = {Cham},
  isbn = {978-3-319-60290-5 978-3-319-60291-2},
  langid = {english},
  pagetotal = {459}
}

@online{Reed2024,
  title = {Scoped {{Propagators}}},
  author = {Reed, Orion},
  date = {2024},
  url = {https://www.orionreed.com/posts/scoped-propagators},
  urldate = {2025-01-16},
  abstract = {Graphs, as a model of computation and as a means of interaction and authorship, have found success in specific domains such as shader programming and signal processing. In these systems, computation is often expressed on nodes of specific types, with edges representing the flow of information. This is a powerful and general-purpose model, but is typically a closed-world environment where both node and edge types are decided at design-time. By choosing an alternate topology where computation is represented by edges, the incentive for a closed environment is reduced. I present Scoped Propagators (SPs), a programming model designed to be embedded within existing environments and user interfaces. By representing computation as mappings between nodes along edges, SPs make it possible to add behaviour and interactivity to environments which were not designed with liveness in mind. I demonstrate an implementation of the SP model in an infinite canvas environment, where users can create arrows between arbitrary shapes and define SPs as Javascript object literals on these arrows.},
  file = {/Users/orion/Zotero/storage/75F8S59B/scoped-propagators.html}
}

@article{Rein2018,
  title = {Exploratory and {{Live}}, {{Programming}} and {{Coding}}: {{A Literature Study Comparing Perspectives}} on {{Liveness}}},
  shorttitle = {Exploratory and {{Live}}, {{Programming}} and {{Coding}}},
  author = {Rein, Patrick and Ramson, Stefan and Lincke, Jens and Hirschfeld, Robert and Pape, Tobias},
  date = {2018-07-23},
  journaltitle = {The Art, Science, and Engineering of Programming},
  shortjournal = {Programming},
  volume = {3},
  number = {1},
  eprint = {1807.08578},
  eprinttype = {arXiv},
  eprintclass = {cs},
  issn = {2473-7321},
  doi = {10.22152/programming-journal.org/2019/3/1},
  url = {http://arxiv.org/abs/1807.08578},
  urldate = {2025-07-20},
  abstract = {Various programming tools, languages, and environments give programmers the impression of changing a program while it is running. This experience of liveness has been discussed for over two decades and a broad spectrum of research on this topic exists. Amongst others, this work has been carried out in the communities around three major ideas which incorporate liveness as an important aspect: live programming, exploratory programming, and live coding. While there have been publications on the focus of each particular community, the overall spectrum of liveness across these three communities has not been investigated yet. Thus, we want to delineate the variety of research on liveness. At the same time, we want to investigate overlaps and differences in the values and contributions between the three communities. Therefore, we conducted a literature study with a sample of 212 publications on the terms retrieved from three major indexing services. On this sample, we conducted a thematic analysis regarding the following aspects: motivation for liveness, application domains, intended outcomes of running a system, and types of contributions. We also gathered bibliographic information such as related keywords and prominent publications. Besides other characteristics the results show that the field of exploratory programming is mostly about technical designs and empirical studies on tools for general-purpose programming. In contrast, publications on live coding have the most variety in their motivations and methodologies with a majority being empirical studies with users. As expected, most publications on live coding are applied to performance art. Finally, research on live programming is mostly motivated by making programming more accessible and easier to understand, evaluating their tool designs through empirical studies with users. In delineating the spectrum of work on liveness, we hope to make the individual communities more aware of the work of the others. Further, by giving an overview of the values and methods of the individual communities, we hope to provide researchers new to the field of liveness with an initial overview.},
  keywords = {Computer Science - Programming Languages,Computer Science - Software Engineering},
  file = {/Users/orion/Zotero/storage/6LXLX9LK/Rein et al. - 2018 - Exploratory and Live, Programming and Coding A Literature Study Comparing Perspectives on Liveness.pdf}
}

@software{Rupert2025,
  title = {Unternet-Co/Web-Applets},
  author = {Rupert, Manfredi and Steven, Vandevelde},
  date = {2025-07-05T19:36:51Z},
  origdate = {2024-09-20T20:42:47Z},
  url = {https://github.com/unternet-co/web-applets},
  urldate = {2025-07-21},
  abstract = {The home of the Web Applets spec, demo and SDK},
  organization = {Unternet}
}

@online{Shank2025,
  title = {Folkjs},
  author = {Shank, Chris and Reed, Orion},
  date = {2025},
  url = {https://folkjs.org/},
  urldate = {2025-07-22},
  file = {/Users/orion/Zotero/storage/2M3KYAEH/folkjs.org.html}
}

@article{Smith2000,
  title = {Building Personal Tools by Programming},
  author = {Smith, David Canfield},
  date = {2000-08},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  volume = {43},
  number = {8},
  pages = {92--95},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/345124.345157},
  url = {https://dl.acm.org/doi/10.1145/345124.345157},
  urldate = {2025-07-20},
  langid = {english}
}

@thesis{Tchernavskij2019,
  title = {Designing and {{Programming Malleable Software}}},
  author = {Tchernavskij, Philip},
  date = {2019-12-03},
  abstract = {User needs for software features and interfaces are diverse and changing, motivating the goal of making it as easy as possible for users themselves to change software, or to have it changed on their behalf in response to their developing needs. However, in my opinion, current approaches do not address this issue adequately: software engineering promotes flexible code, but in practice this does not help end-users effect change in their software. End-user and live programming systems help users customize their interfaces by accessing and modifying the underlying source code. I take a different approach, seeking to maximize the kinds of modifications that can take place through regular interactions, e.g. direct manipulation of interface elements. I call this approach malleable software. To understand contemporary needs for and barriers to modifying software, I study how it is produced, maintained, adopted, and appropriated in a network of communities working with biodiversity data. I find that the mode of software production, i.e. the technologies and economic relations that produce software, is biased towards centralized, one-size-fits-all systems. This leads me to propose a long-term, interdisciplinary research program in reforming the tools of software development to create infrastructures for plurality. These tools should help multiple communities collaborate without forcing them to consolidate around identical interfaces or data representations. Malleable software is one such infrastructure, in which interactive systems are dynamic constellations of interfaces, devices, and programs assembled at the site of use. My technological contribution is a reconstruction of the programming mechanisms used to create interactive behavior. I generalize existing control structures for interaction as entanglements, and develop a higher-order control structure, entanglers, which produces entanglements when particular pre-conditions, called co-occurrences, are met. Entanglers cause interactions to be assembled dynamically as system components come and go. I develop these mechanisms in Tangler, a prototype environment for building malleable interactive software. I demonstrate how Tangler supports malleability through a set of benchmark cases illustrating how users can modify systems by themselves or with programmer assistance. This thesis is an early step towards a paradigm for programming and designing malleable software that can keep up with human diversity.},
  file = {/Users/orion/Zotero/storage/T52XKPJM/Tchernavskij - 2019 - Designing and Programming Malleable Software.pdf}
}

@online{zotero-item-9349,
  title = {Shirky: {{Situated Software}}},
  url = {https://gwern.net/doc/technology/2004-03-30-shirky-situatedsoftware.html},
  urldate = {2025-07-20},
  abstract = {Clay Shirky's writings about the Internet, including Economics and Culture, Media and Community, Open Source}
}

@online{zotero-item-9570,
  title = {Specification},
  url = {https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/},
  urldate = {2025-07-23},
  file = {/Users/orion/Zotero/storage/5MVRVD5B/specification.html}
}
